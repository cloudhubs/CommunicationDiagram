/**
 *
 * Language Overview:
 *
 * The language starts with the header section which is where the types and functions are declared.
 * Following this section is the program section.
 *
 * Each token is analyzed and keywords are classified as instructions.
 * Naturally these instructions are reserved.
 *
 * The program is executed by running one token at a time and storing the state. The way that functions
 * are handled is that when they are defined their tokens are stored in order with an associated name.
 * When the function is called, each associated token is called one by one.
 *
 * Instructions:
 *
 *    Header Instructions are as follows. Only valid before BEGIN_PROGRAM is seen.
 *
 *         DEFINE_TYPES: all non instruction tokens after this are considered class names
 *            this must be the first instruction in the program
 *
 *         DEFINE_FUNC: creating a function definition
 *            all tokens after this are stored until END_DEFINE_FUNC
 *
 *         END_DEFINE_FUNC: ends a function definition
 *
 *         BEGIN_PROGRAM: ends header section and begins the program section
 *
 *    Program instructions are as follows. Only valid after BEGIN_PROGRAM is seen:
 *
 *        DECLARE: declares an instance of an object.
 *            params: type name
 *
 *        START_IF: begins conditional execution of the following code
 *            the next token is the condition
 *
 *        END_IF: ends last seen START_IF
 *
 *        START_ELSE: begins a negation of the last if block
 *
 *        END_ELSE: ends an else block
 *
 *        CALL_FUNCTION: indicates that a function is going to be called
 *            params: objectName functionName END_FUNCTION_CALL
 *
 *        END_FUNCTION_CALL: indicates the function call is over
 *            MUST BE PLACED AFTER A methodName that is being called
 *            I will probably take this instruction out later but it makes parsing easier
 *
 *        END_PROGRAM: ends a program
 *            must be the last token in the program
 *
 *
 * @author Ian Laird
 */